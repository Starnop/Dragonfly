/*
 * Copyright 1999-2018 Alibaba Group.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package downloader

import (
	"crypto/md5"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"

	"github.com/alibaba/Dragonfly/dfget/config"
	"github.com/alibaba/Dragonfly/dfget/util"
)

// BackDownloader downloads the file from file resource.
type BackDownloader struct {
	Ctx     *config.Context
	URL     string
	Target  string
	Md5     string
	TaskID  string
	Node    string
	Total   int64
	Success bool

	tempFileName string
	cleaned      bool
}

// Run starts to download the file.
func (bd *BackDownloader) Run() error {
	var (
		resp *http.Response
		err  error
		f    *os.File
	)
	log := bd.Ctx.ClientLogger

	if bd.Ctx.Notbs || bd.Ctx.BackSourceReason == config.BackSourceReasonNoSpace {
		bd.Ctx.BackSourceReason += config.ForceNotBackSourceAddition
		err = fmt.Errorf("download fail and not back source: %d", bd.Ctx.BackSourceReason)
		return err
	}

	util.Printer.Printf("download from source")
	log.Infof("start download %s from the source station", path.Base(bd.Target))

	defer bd.Cleanup()

	prefix := "backsource." + bd.Ctx.Sign + "."
	if f, err = ioutil.TempFile(path.Dir(bd.Target), prefix); err != nil {
		return err
	}
	bd.tempFileName = f.Name()
	defer f.Close()

	if resp, err = http.Get(bd.URL); err != nil {
		return err
	}
	defer resp.Body.Close()

	buf := make([]byte, 512*1024)
	reader := NewLimitReader(resp.Body, bd.Ctx.LocalLimit, md5.New())
	if bd.Total, err = io.CopyBuffer(f, reader, buf); err != nil {
		return err
	}
	err = os.Rename(bd.tempFileName, bd.Target)
	return err
}

// Cleanup clean all temporary resources generated by executing Run.
func (bd *BackDownloader) Cleanup() {
	if bd.cleaned {
		return
	}

	if !util.IsEmptyStr(bd.tempFileName) {
		util.DeleteFile(bd.tempFileName)
	}
	bd.cleaned = true
}
